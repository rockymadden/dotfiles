function calc() {
  local result=$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')

  if [[ "$result" == *.* ]]; then
    printf "$result" |
    sed -e 's/^\./0./' \
        -e 's/^-\./-0./' \
        -e 's/0*$//;s/\.$//'
  else
    printf "$result"
  fi

  printf "\n"
}

function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  [ -t 1 ] && echo ''
}

function curl() {
  case "${1}" in
    finlink)
      command curl "${2}" -s -L -I -o /dev/null -w "%{http_code}: %{url_effective}\\n"
    ;;

    follow)
      local resp=$(command curl "${2}" -s -I -o /dev/null -w "%{http_code}|%{redirect_url}")
      IFS='|' read -a tuple <<< "${resp}"

      echo "${tuple[0]}: ${2}"

      case "${tuple[0]}" in
        301|302|303|307|308)
          curl follow "${tuple[1]}"
        ;;
      esac
    ;;

    --binwrap)
      echo 'Usage:'
      echo '  curl {finlink|follow} <url>'
    ;;

    *)
      command curl "${@:1}"
    ;;
  esac
}

function dataurl() {
  local mimeType=$(file -b --mime-type "$1")

  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi

  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  [ -t 1 ] && echo ''
}

function extract() {
  [ ! -f "$1" ] && return 1

  case "$1" in
    *.tar.bz2) tar xjf "$1" ;;
    *.tar.gz) tar xzf "$1" ;;
    *.tar.xz) tar xJf "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar xf "$1" ;;
    *.tbz2) tar xjf "$1" ;;
    *.tgz) tar xzf "$1" ;;
    *.zip) 7z x "$1" ;;
    *.7z) 7z x "$1" ;;
    *) return 1 ;;
  esac
}

function md5() {
  openssl dgst -md5 "${1}" | cut -d' ' -f2
}

function sha1() {
  openssl dgst -sha1 "${1}" | cut -d' ' -f2
}

function sha256() {
  openssl dgst -sha256 "${1}" | cut -d' ' -f2
}

function sha512() {
  openssl dgst -sha512 "${1}" | cut -d' ' -f2
}

function socat() {
  case "${1}" in
    http-echo|echo-http)
      local port=8080

      while (( "$#" )); do
        case "${2}" in
          --port=*) port=${2/--port=/''} ; shift ;;
          -p*) port=${3} ; shift ;;
          *) shift ;;
        esac
      done

      command socat -v -T0.05 tcp-listen:${port},reuseaddr,fork,crlf system:"source ~/.functions && socat _http-echo"
    ;;

    _http-echo|_echo-http)
      echo 'HTTP/1.1 200 OK'
      echo 'Content-Type: text/plain'
      echo "Date: $(date)"
      echo "Server: ${SOCAT_SOCKADDR}:${SOCAT_SOCKPORT}"
      echo "Client: ${SOCAT_PEERADDR}:${SOCAT_PEER_PORT}"
      echo 'Connection: close'
      echo
      cat
    ;;

    *) command socat "${@:1}" ;;
  esac
}
