function calc() {
  local result=$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')

  if [[ "$result" == *.* ]]; then
    printf "$result" |
    sed -e 's/^\./0./' \
        -e 's/^-\./-0./' \
        -e 's/0*$//;s/\.$//'
  else
    printf "$result"
  fi

  printf "\n"
}

function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"

  if [ -t 1 ]; then
    echo ""
  fi
}

function curl() {
  case "${1}" in
    finlink)
      command curl "${2}" -s -L -I -o /dev/null -w "%{http_code}: %{url_effective}\\n"
    ;;

    follow)
      local resp=$(command curl "${2}" -s -I -o /dev/null -w "%{http_code}|%{redirect_url}")
      IFS='|' read -a tuple <<< "${resp}"

      echo "${tuple[0]}: ${2}"

      case "${tuple[0]}" in
        301|302|303|307|308)
          curl follow "${tuple[1]}"
        ;;
      esac
    ;;

    --binwrap)
      echo 'Usage:'
      echo '  curl {finlink|follow} <url>'
    ;;

    *)
      command curl "${@:1}"
    ;;
  esac
}

function dataurl() {
  local mimeType=$(file -b --mime-type "$1")

  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi

  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# dotfile package manager
function dpm() {
  case "${1}" in
    init)
      case "${2}" in
        apms|apm-packages|atom-packages) mkdir -p ~/.atom/packages ;;

        brews|brew-forumulas|brew-packages)
          brew tap homebrew/dupes
          brew tap homebrew/science
          brew tap rockymadden/rockymadden
        ;;

        casks|brew-cask-formulas|brew-cask-packages)
          brew tap caskroom/cask
        ;;

        gems|ruby-packages) return 0 ;;

        npms|node-packages) return 0 ;;

        pips|python-packages) return 0 ;;
      esac
    ;;

    install)
      case "${2}" in
        apms|apm-packages|atom-packages)
          local p=$(<~/.dpm/apm)
          local d=$(comm -13 <(apm list --bare --installed | ghead -n -1 | cut -f1 -d'@' | sort) <(echo "${p}" | sort))

          test -n "${d}" && read -p "Proceed with installing (y/n)? Packages: $(echo "${d}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) echo "${d}" | xargs apm install ;;
            *) return 1 ;;
          esac
        ;;

        brews|brew-forumulas|brew-packages)
          local p=$(<~/.dpm/brew)
          local d=$(comm -13 <(brew list -1 | sed 's|rockymadden/rockymadden/||' | sort) <(echo "${p}" | sort))

          test -n "${d}" && read -p "Proceed with installing (y/n)? Packages: $(echo "${d}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) brew update && echo "${d}" | xargs brew install ;;
            *) return 1 ;;
          esac
        ;;

        casks|brew-cask-formulas|brew-cask-packages)
          local p=$(<~/.dpm/brew-cask)
          local d=$(comm -13 <(brew cask list -1 | sort) <(echo "${p}" | sort))

          test -n "${d}" && read -p "Proceed with installing (y/n)? Packages: $(echo "${d}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) brew cask update && echo "${d}" | xargs brew cask install ;;
            *) return 1 ;;
          esac
        ;;

        gems|ruby-packages)
          local p=$(<~/.dpm/gem)

          test -n "${p}" && read -p "Proceed with installing (y/n)? Packages: $(echo "${p}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) echo "${p}" | xargs gem install ;;
            *) return 1 ;;
          esac
        ;;

        npms|node-packages)
          local p=$(<~/.dpm/npm)

          test -n "${p}" && read -p "Proceed with installing (y/n)? Packages: $(echo "${p}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) echo "${p}" | xargs npm install -g ;;
            *) return 1 ;;
          esac
        ;;

        pips|python-packages)
          local p=$(<~/.dpm/pip)

          test -n "${p}" && read -p "Proceed with installing (y/n)? Packages: $(echo "${p}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) echo "${p}" | xargs pip install ;;
            *) return 1 ;;
          esac
        ;;
      esac
    ;;

    uninstall)
      case "${2}" in
        apms|apm-packages|atom-packages)
          local p=$(<~/.dpm/apm)
          local d=$(comm -13 <(echo "${p}" | sort) <(apm list --bare --installed | ghead -n -1 | cut -f1 -d'@' | sort))

          test -n "${d}" && read -p "Proceed with uninstalling (y/n)? Packages: $(echo "${d}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) echo "${d}" | xargs apm uninstall ;;
            *) return 1 ;;
          esac
        ;;

        brews|brew-forumulas|brew-packages)
          local p=$(<~/.dpm/brew)
          local d=$(comm -13 <(echo "${p}" | sort) <(brew leaves | sed 's|rockymadden/rockymadden/||' | sort))

          test -n "${d}" && read -p "Proceed with uninstalling (y/n)? Packages: $(echo "${d}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) echo "${d}" | xargs brew uninstall ;;
            *) return 1 ;;
          esac
        ;;

        casks|brew-cask-formulas|brew-cask-packages)
          local p=$(<~/.dpm/brew-cask)
          local d=$(comm -13 <(echo "${p}" | sort) <(brew cask list -1 | sort))

          test -n "${d}" && read -p "Proceed with uninstalling (y/n)? Packages: $(echo "${d}" | tr '\n' ' ')" proceed
          case "${proceed}" in
            y|Y) echo "${d}" | xargs brew cask zap ;;
            *) return 1 ;;
          esac
        ;;

        gems|ruby-packages) return 0 ;;

        npms|node-packages) return 0 ;;

        pips|python-packages) return 0 ;;
      esac
    ;;

    *) echo 'Command not found' ; return 1 ;;
  esac
}

function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)

  if [ -t 1 ]; then
    echo ""
  fi
}

function extract() {
  if [ ! -f "$1" ]; then return 1; fi

  case "$1" in
    *.tar.bz2) tar xjf "$1" ;;
    *.tar.gz) tar xzf "$1" ;;
    *.tar.xz) tar xJf "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar xf "$1" ;;
    *.tbz2) tar xjf "$1" ;;
    *.tgz) tar xzf "$1" ;;
    *.zip) 7z x "$1" ;;
    *.7z) 7z x "$1" ;;
    *) return 1 ;;
  esac
}

function md5() {
  openssl dgst -md5 "${1}" | cut -d' ' -f2
}

function notify() {
  echo "${*:-done}" | terminal-notifier -sound Glass
}

function sha1() {
  openssl dgst -sha1 "${1}" | cut -d' ' -f2
}

function sha256() {
  openssl dgst -sha256 "${1}" | cut -d' ' -f2
}

function sha512() {
  openssl dgst -sha512 "${1}" | cut -d' ' -f2
}

function socat() {
  case "${1}" in
    http-echo|echo-http)
      local port=8080

      while (( "$#" )); do
        case "${2}" in
          --port=*) port=${2/--port=/''} ; shift ;;
          -p*) port=${3} ; shift ;;
          *) shift ;;
        esac
      done

      command socat -v -T0.05 tcp-listen:${port},reuseaddr,fork,crlf system:"source ~/.functions && socat _http-echo"
    ;;

    _http-echo|_echo-http)
      echo 'HTTP/1.1 200 OK'
      echo 'Content-Type: text/plain'
      echo "Date: $(date)"
      echo "Server: ${SOCAT_SOCKADDR}:${SOCAT_SOCKPORT}"
      echo "Client: ${SOCAT_PEERADDR}:${SOCAT_PEER_PORT}"
      echo 'Connection: close'
      echo
      cat
    ;;

    *) command socat "${@:1}" ;;
  esac
}

function ssh-forward() {
  test "$#" -lt 1 && return 1

  a=(${1//:/ })

  case "$#" in
    2)
      lp=${2}
      rp=${a[1]}
    ;;
    1)
      lp=${a[1]}
      rp=${a[1]}
    ;;
  esac

  case "${a[0]}" in
    *@*) ssh -N -L ${lp}:localhost:${rp} -l ${a[0]/@/ } ;;
    *) ssh -N -L ${lp}:localhost:${rp} -l $(whoami) ${a[0]} ;;
  esac
}

function transfer() {
  if [ $# -eq 0 ]; then return 1; fi

  f=$1
  tf=$(mktemp -t transferXXX)

  if tty -s; then
    if [ ! -e $f ]; then return 1; fi

    bf=$(basename "$f" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
    curl --progress-bar --upload-file "$f" "https://transfer.sh/$bf" >> $tf
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$f" >> $tf
  fi

  cat $tf
  cat $tf | pbcopy
  rm -f $tf
}
